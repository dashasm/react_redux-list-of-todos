{"version":3,"sources":["features/filter.ts","features/currentTodo.ts","features/todos.ts","components/TodoFilter/TodoFilter.tsx","app/store.ts","components/TodoList/TodoList.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterType","actions","todo","type","payload","currentTodoReducer","state","action","TodosActionType","initialState","filterType","All","appliedQuery","query","filterReducer","FilterSelector","combineReducers","filter","TODO_ACTIONS_CREATOR","todos","SetTodos","todosReducer","todosState","rootReducer","TODOS_SELECTORS","createStore","composeWithDevTools","applyMiddleware","thunk","t","title","toLowerCase","includes","currentTodo","selector","isQuery","Active","completed","Completed","store","TodoList","dispatch","useDispatch","useSelector","selectedTodo","length","className","map","id","onClick","TodoFilter","memo","dispach","value","onChange","event","statusPayload","target","placeholder","queryPayload","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","selectedUser","setSelectedUser","useEffect","userId","user","href","email","name","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1d516b7a.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\nexport enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\ntype SetFilterType = {\n  type: 'filter/SET_FILTERTYPE';\n  payload: string;\n};\n\ntype SetAppliedQueryAction = {\n  type: 'filter/SET_APPLIEDQUERY';\n  payload: string,\n};\n\n// type setFilteredList = {\n//   type: 'filter/SET_FILTEREDLIST',\n// };\n\ntype Action = SetFilterType | SetAppliedQueryAction;\n\ntype FilterState = {\n  filterType: string,\n  appliedQuery: string,\n};\n\nconst initialState: FilterState = {\n  filterType: FilterType.All,\n  appliedQuery: '',\n};\n\nexport const actions = {\n  setFilterType: (filterType: string): SetFilterType => ({\n    type: 'filter/SET_FILTERTYPE',\n    payload: filterType,\n  }),\n  setAppliedQuery: (query: string): SetAppliedQueryAction => ({\n    type: 'filter/SET_APPLIEDQUERY',\n    payload: query,\n  }),\n};\n\nconst filterReducer = (\n  state = initialState,\n  action: Action,\n): FilterState => {\n  switch (action.type) {\n    case 'filter/SET_FILTERTYPE':\n      return {\n        ...state,\n        filterType: action.payload,\n      };\n\n    case 'filter/SET_APPLIEDQUERY':\n      return {\n        ...state,\n        appliedQuery: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  filter: filterReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst getFilterQuerySelector = (state: RootState) => state.filter.appliedQuery;\nconst getFilterTypeSelector = (state: RootState) => state.filter.filterType;\n\nexport const FilterSelector = {\n  getFilterQuery: getFilterQuerySelector,\n  getFilterType: getFilterTypeSelector,\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n// These actions will be used in the application\n\nexport const actions = { setTodo, removeTodo };\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import {\n  Action as BaseAction,\n  combineReducers, createStore, applyMiddleware,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Todo } from '../types/Todo';\n\ninterface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum TodosActionType {\n  SetTodos = 'todos/set_todos',\n}\n\nexport type SetTodosAction = Action<TodosActionType.SetTodos, Todo[]>;\n\ntype TodosActions = SetTodosAction;\n\nconst setTodosActionCreator = (todos: Todo[]): SetTodosAction => ({\n  type: TodosActionType.SetTodos,\n  payload: todos,\n});\n\nexport const TODO_ACTIONS_CREATOR = {\n  setTodoList: setTodosActionCreator,\n};\n\nconst todosReducer = (\n  todosState: Todo[] = [],\n  action: TodosActions,\n): Todo[] => {\n  switch (action.type) {\n    case TodosActionType.SetTodos:\n      return [...action.payload];\n    default:\n      return todosState;\n  }\n};\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nconst todosSelector = (state: RootState): Todo[] => state.todos;\n\nconst todosBySearchQuery = (query: string) => {\n  return (state: RootState) => {\n    return state.todos\n      .filter((t) => t.title.toLowerCase().includes(query.toLowerCase()));\n  };\n};\n\nexport const TODOS_SELECTORS = {\n  todos: todosSelector,\n  todosBySearchQuery,\n};\n\nexport default todosReducer;\n","import { FC, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions, FilterSelector } from '../../features/filter';\n\nenum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport const TodoFilter: FC = memo(() => {\n  const appliedQuery: string = useSelector(FilterSelector.getFilterQuery);\n  const filterType: string = useSelector(FilterSelector.getFilterType);\n\n  const dispach = useDispatch();\n\n  const handelSelectFiter = (statusPayload: string) => {\n    dispach(actions.setFilterType(statusPayload));\n  };\n\n  const handelSearchQuery = (\n    queryPayload: string,\n  ) => {\n    dispach(actions.setAppliedQuery(queryPayload));\n  };\n\n  const handelCloseSearch = () => {\n    dispach(actions.setAppliedQuery(''));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={(event) => handelSelectFiter(event.target.value)}\n          >\n            <option value={FilterType.All}>All</option>\n            <option value={FilterType.Active}>Active</option>\n            <option value={FilterType.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={appliedQuery}\n          onChange={(event) => handelSearchQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {appliedQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handelCloseSearch()}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","// import { useMemo } from 'react';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer, { FilterType } from '../features/filter';\nimport todosReducer from '../features/todos';\n// import { Todo } from '../types/Todo';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// const filtredByComleted = (\n//   nameFilter: string,\n//   todosList: Todo[],\n// ): Todo[] => {\n//   switch (nameFilter) {\n//     case 'completed':\n//       return todosList.filter(item => item.completed === true);\n\n//     case 'active':\n//       return todosList.filter(item => item.completed === false);\n\n//     case 'all':\n//       return todosList;\n\n//     default:\n//       return todosList;\n//   }\n// };\n\n// const filredByQuery = (\n//   searchQury: string, todosList: Todo[],\n// ): Todo[] => {\n//   if (searchQury === '') {\n//     return todosList;\n//   }\n\n//   return (todosList\n//     .filter(\n//       item => item.title.toLowerCase().includes(searchQury.toLowerCase()),\n//     ));\n// };\n\n// const filteredArray = useMemo(() => {\n//   const filteredBySelect = filtredByComleted(filterType, todos);\n\n//   return filredByQuery(appliedQuery, filteredBySelect);\n// }, [filterType, appliedQuery, todos]);\n\n// const filterTodos = (state: RootState): Todo[] => {\n//   const { filterType, appliedQuery } = state.filter;\n//   const { todos } = state;\n\n//   let todosFilteredByType;\n\n//   switch (filterType) {\n//     case 'completed':\n//       todosFilteredByType = todos.filter(item => item.completed === true);\n//       break;\n\n//     case 'active':\n//       todosFilteredByType = todos.filter(item => item.completed === false);\n//       break;\n\n//     case 'all':\n//     default:\n//       todosFilteredByType = todos;\n//       break;\n//   }\n\n//   if (appliedQuery === '') {\n//     return todosFilteredByType;\n//   }\n\n//   return (todosFilteredByType\n//     .filter(\n//       item => item.title.toLowerCase().includes(appliedQuery.toLowerCase()),\n//     ));\n// };\n\nexport const selector = {\n  getSelectedTodo: (state: RootState) => state.currentTodo,\n  getTodos: (state: RootState) => {\n    const { todos } = state;\n    const { filterType, appliedQuery } = state.filter;\n\n    return todos.filter(todo => {\n      const isQuery = todo.title.toLowerCase()\n        .includes(appliedQuery.toLowerCase());\n\n      switch (filterType) {\n        case FilterType.Active:\n          return isQuery && !todo.completed;\n        case FilterType.Completed:\n          return isQuery && todo.completed;\n        case FilterType.All:\n          return isQuery;\n        default:\n          return true;\n      }\n    });\n  },\n};\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { selector } from '../../app/store';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos: Todo[] = useSelector(selector.getTodos);\n  const selectedTodo = useSelector(selector.getSelectedTodo);\n\n  return (\n    <>\n      {todos.length < 0\n       && (\n         <p className=\"notification is-warning\">\n           There are no todos matching current filter criteria\n         </p>\n       )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map((todo) => (\n            <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={todo.completed\n                    ? 'has-text-success'\n                    : 'has-text-danger'}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => (dispatch(actions.setTodo(todo)))}\n                >\n                  <span className=\"icon\">\n                    {selectedTodo?.id === todo.id\n                      ? (<i className=\"far fa-eye-slash\" />)\n                      : (<i className=\"far fa-eye\" />)}\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser } from '../../api';\nimport { actions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { selector } from '../../app/store';\n\nexport const TodoModal: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const dispatch = useDispatch();\n  const selectedTodo = useSelector(selector.getSelectedTodo);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId).then(user => setSelectedUser(user));\n    }\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                dispatch(actions.removeTodo());\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${selectedUser.email}`}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport { useDispatch, useSelector } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport {\n  TODOS_SELECTORS,\n  TODO_ACTIONS_CREATOR,\n} from './features/todos';\nimport { getTodos } from './api';\nimport { selector } from './app/store';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(TODOS_SELECTORS.todosBySearchQuery(''));\n  const selectedTodo = useSelector(selector.getSelectedTodo);\n\n  useEffect(() => {\n    getTodos().then(res => dispatch(TODO_ACTIONS_CREATOR.setTodoList(res)));\n  }, []);\n\n  // const todo = todos.find(element => element.id === selectedTodo?.id) || null;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length\n                ? (\n                  <TodoList />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo\n        && (\n          <TodoModal />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}